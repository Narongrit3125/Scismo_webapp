generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../"
  outputName = "database.dbml"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  username           String     @unique
  password           String
  firstName          String
  lastName           String
  role               Role       @default(MEMBER)
  isActive           Boolean    @default(true)
  lastLoginAt        DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  authoredNews       News[]
  authoredActivities Activity[]
  authoredProjects   Project[]
  contactMessages    Contact[]

  @@map("users")
}

model Member {
  id           String   @id @default(cuid())
  studentId    String   @unique
  phone        String?
  year         Int
  academicYear Int      @default(2568)
  department   String
  faculty      String
  position     String?
  division     String?
  joinDate     DateTime @default(now())
  isActive     Boolean  @default(true)
  avatar       String?
  email        String?
  name         String

  @@map("members")
}

model News {
  id          String     @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  authorId    String
  priority    Priority   @default(MEDIUM)
  isPinned    Boolean    @default(false)
  status      NewsStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  slug        String     @unique
  viewCount   Int        @default(0)
  image       String?
  attachments String?
  author      User       @relation(fields: [authorId], references: [id])

  @@index([status])
  @@index([publishedAt])
  @@map("news")
}

model Activity {
  id          String         @id @default(cuid())
  title       String
  description String
  authorId    String
  projectId   String?
  type        ActivityType
  startDate   DateTime
  endDate     DateTime?
  location    String?
  status      ActivityStatus @default(PLANNING)
  isPublic    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  image       String?
  gallery     String?
  author      User           @relation(fields: [authorId], references: [id])
  project     Project?       @relation(fields: [projectId], references: [id])

  @@index([status])
  @@index([startDate])
  @@map("activities")
}

model Project {
  id           String        @id @default(cuid())
  code         String        @unique
  title        String
  description  String
  authorId     String
  academicYear Int
  semester     Int?
  status       ProjectStatus @default(PLANNING)
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(true)
  image        String?
  planFile     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budget       Float?
  author       User          @relation(fields: [authorId], references: [id])
  activities   Activity[]

  @@index([academicYear])
  @@index([status])
  @@map("projects")
}

model Document {
  id            String        @id @default(cuid())
  title         String
  description   String?
  type          String
  fileName      String
  fileUrl       String
  fileSize      Int
  version       String?
  isPublic      Boolean       @default(true)
  accessLevel   AccessLevel   @default(PUBLIC)
  downloadCount Int           @default(0)
  uploadedBy    String
  approvedBy    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  expiryDate    DateTime?

  @@index([isPublic])
  @@map("documents")
}

model Contact {
  id         String        @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String
  message    String
  category   String        @default("general")
  priority   Priority      @default(MEDIUM)
  status     ContactStatus @default(PENDING)
  userId     String?
  assignedTo String?
  repliedBy  String?
  repliedAt  DateTime?
  reply      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User?         @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([category])
  @@map("contacts")
}

enum Role {
  ADMIN
  MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ActivityType {
  WORKSHOP
  SEMINAR
  COMPETITION
  VOLUNTEER
  SOCIAL
  TRAINING
  MEETING
  CEREMONY
  FUNDRAISING
  EXHIBITION
  ACADEMIC
  SPORT
  ART_CULTURE
}

enum ActivityStatus {
  PLANNING
  OPEN_REGISTRATION
  FULL
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum ProjectStatus {
  PLANNING
  PENDING_APPROVAL
  APPROVED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
  CLOSED
}

enum AccessLevel {
  PUBLIC
  MEMBER_ONLY
  ADMIN_ONLY
  RESTRICTED
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  REPLIED
  CLOSED
}
